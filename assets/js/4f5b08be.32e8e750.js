"use strict";(self.webpackChunksrc=self.webpackChunksrc||[]).push([[583],{2845:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var i=t(4848),r=t(8453);const o={title:"IMatcher"},s="IMatcher",c={id:"Modules/IMatcher",title:"IMatcher",description:"Estimate the optical flow map between two frames. (Use left-frame of stereo pair)",source:"@site/docs/02-Modules/01-IMatcher.md",sourceDirName:"02-Modules",slug:"/Modules/IMatcher",permalink:"/wiki/Modules/IMatcher",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"IMatcher"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/wiki/Modules/Modules"},next:{title:"IStereoDepth",permalink:"/wiki/Modules/IStereoDepth"}},l={},a=[{value:"Interface",id:"interface",level:2},{value:"Methods to Implement",id:"methods-to-implement",level:3},{value:"Implementations",id:"implementations",level:2},{value:"Modifiers",id:"modifiers",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"imatcher",children:"IMatcher"})}),"\n",(0,i.jsx)(n.p,{children:"Estimate the optical flow map between two frames. (Use left-frame of stereo pair)"}),"\n",(0,i.jsx)(n.h2,{id:"interface",children:"Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",metastring:'title="Module/Frontend/Matching.py"',children:"class IMatcher(ABC, Generic[T_Context], ConfigTestableSubclass):\r\n    @property\r\n    @abstractmethod\r\n    def provide_cov(self) -> bool: ...\r\n    \r\n    @abstractmethod\r\n    def init_context(self) -> T_Context: ...\r\n    \r\n    @abstractmethod\r\n    def estimate(self, frame_t1: SourceDataFrame, frame_t2: SourceDataFrame) -> tuple[torch.Tensor, torch.Tensor | None]: ...    \n"})}),"\n",(0,i.jsx)(n.h3,{id:"methods-to-implement",children:"Methods to Implement"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"IMatcher.estimate(frame_t1: SourceDataFrame, frame_t2: SourceDataFrame) -> flow, flow_cov"})}),"\n",(0,i.jsxs)(n.p,{children:["Given a frame with imageL, imageR being Bx3xHxW, return ",(0,i.jsx)(n.code,{children:"output"})," where"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"flow"}),"      - Bx2xHxW shaped torch.Tensor, estimated optical flow map\r\nmaybe padded with ",(0,i.jsx)(n.code,{children:"nan"})," if model can't output prediction with same shape as input image."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"flow_cov"}),"  - Bx2xHxW shaped torch.Tensor or None, estimated covariance of optical flow map map (if provided)\r\nmaybe padded with ",(0,i.jsx)(n.code,{children:"nan"})," if model can't output prediction with same shape as input image."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"IMatcher.provide_cov"})}),"\n",(0,i.jsxs)(n.p,{children:["Implement this property (to simply return ",(0,i.jsx)(n.code,{children:"True"})," or ",(0,i.jsx)(n.code,{children:"False"}),") to indicate whether the flow estimation network will jointly estimate the covariance / uncertainty."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"IMatcher.init_context(self) -> T_Context"})}),"\n",(0,i.jsxs)(n.p,{children:["Works similar to the ",(0,i.jsx)(n.code,{children:"__init__"})," method in python, where all used properties are stored in a dictionary and stored at ",(0,i.jsx)(n.code,{children:"self.context"}),". This is for better static type inference on the property of each implementation of ",(0,i.jsx)(n.code,{children:"IMatcher"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["In this method you can access the configuration passed on initialization by ",(0,i.jsx)(n.code,{children:"self.config"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class GTMatcher(IMatcher[None])"})}),"\n",(0,i.jsx)(n.p,{children:"Read ground truth flow from dataset and return"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class FlowFormerMatcher(IMatcher[ModelContext])"})}),"\n",(0,i.jsx)(n.p,{children:"Predict flow using vanilla FlowFormer model"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class FlowFormerCovMatcher(IMatcher[ModelContext])"})}),"\n",(0,i.jsx)(n.p,{children:"Jointly estimate flow and flow uncertainty using the proposed model in paper."}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This is ",(0,i.jsx)(n.em,{children:"not"})," the model used in MAC-VO. Instead, we used an implementation to ",(0,i.jsx)(n.code,{children:"IFrontend"})," interface to jointly estimate\r\nflow and disparity (thus depth) for efficiency. See page for ",(0,i.jsx)(n.code,{children:"IFrontend"})," interface for detail."]})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class TartanVOMatcher(IMatcher[ModelContext])"})}),"\n",(0,i.jsxs)(n.p,{children:["Estimate flow using TartanVO flow model. Note that the predicted flow will be padded with ",(0,i.jsx)(n.code,{children:"float.nan"})," if its shape is not multiples of ",(0,i.jsx)(n.code,{children:"64"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class TartanVOCovMatcher(IMatcher[ModelContext])"})}),"\n",(0,i.jsx)(n.p,{children:"A modified version of TartanVO flow model that can jointly estimate flow and uncertainty."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class GMFlowMatcher(IMatcher[ModelContext])"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Will be released soon."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class UniMatchMatcher(IMatcher[ModelContext])"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Will be released soon."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class UniMatchCovMatcher(IMatcher[ModelContext])"})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsx)(n.p,{children:"Will be released soon."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"modifiers",children:"Modifiers"}),"\n",(0,i.jsxs)(n.p,{children:['Modifiers are "higher-order module" that creates a new ',(0,i.jsx)(n.code,{children:"IMatcher"})," by tweaking the input/output of some designated ",(0,i.jsx)(n.code,{children:"IMatcher"})," implementation."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"class ApplyGTCov(IMatcher[IMatcher])"})}),"\n",(0,i.jsx)(n.p,{children:"A higher-order-module that encapsulates a IMatcher module."}),"\n",(0,i.jsx)(n.p,{children:"Always compare the estimated output of encapsulated IMatcher with ground truth matching and convert\r\nerror in estimation to 'estimated' covariance."}),"\n",(0,i.jsxs)(n.p,{children:["Will raise ",(0,i.jsx)(n.code,{children:"AssertionError"})," if frame does not have gtFlow."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);